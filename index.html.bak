<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MindPilot - 认知图谱平台</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #7C3AED;
            --secondary-color: #5B21B6;
            --accent-color: #C4B5FD;
            --background-color: #F9FAFB;
            --sidebar-bg: #F3F4F6;
            --text-color: #1F2937;
            --border-color: #E5E7EB;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            height: 100vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .navbar {
            background-color: white;
            border-bottom: 1px solid var(--border-color);
            padding: 0.5rem 1rem;
        }
        
        .navbar-brand {
            font-weight: 700;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .main-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .sidebar {
            width: 250px;
            background-color: var(--sidebar-bg);
            border-right: 1px solid var(--border-color);
            padding: 1rem;
            overflow-y: auto;
        }
        
        .content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 1rem;
            overflow-y: auto;
        }
        
        .visualization-container {
            height: 60%;
            border-top: 1px solid var(--border-color);
            padding: 1rem;
            overflow: hidden;
            position: relative;
        }
        
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 1rem;
        }
        
        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
        }
        
        .tab.active {
            border-bottom: 2px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 500;
        }
        
        .chat-input {
            display: flex;
            padding: 1rem;
            border-top: 1px solid var(--border-color);
            background-color: white;
        }
        
        .chat-input textarea {
            flex: 1;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 0.75rem;
            resize: none;
            height: 60px;
        }
        
        .chat-input button {
            margin-left: 0.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            padding: 0 1rem;
        }
        
        .message {
            margin-bottom: 1rem;
            max-width: 80%;
        }
        
        .message.user {
            align-self: flex-end;
            background-color: var(--primary-color);
            color: white;
            border-radius: 1rem 1rem 0 1rem;
            padding: 0.75rem 1rem;
        }
        
        .message.bot {
            align-self: flex-start;
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 1rem 1rem 1rem 0;
            padding: 0.75rem 1rem;
        }
        
        .sidebar-section {
            margin-bottom: 1.5rem;
        }
        
        .sidebar-section h5 {
            font-size: 0.875rem;
            text-transform: uppercase;
            color: #6B7280;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border-radius: 0.375rem;
            cursor: pointer;
            color: #4B5563;
            margin-bottom: 0.25rem;
        }
        
        .sidebar-item:hover {
            background-color: #F3F4F6;
        }
        
        .sidebar-item.active {
            background-color: #EDE9FE;
            color: var(--primary-color);
        }
        
        .sidebar-item i {
            margin-right: 0.5rem;
        }
        
        #visualization-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #9CA3AF;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="bi bi-diagram-3"></i>
                MindPilot
            </a>
            <div class="d-flex">
                <button class="btn btn-sm btn-outline-secondary me-2">
                    <i class="bi bi-gear"></i> 设置
                </button>
                <button class="btn btn-sm btn-outline-secondary">
                    <i class="bi bi-person-circle"></i> 用户
                </button>
            </div>
        </div>
    </nav>
    
    <div class="main-container">
        <div class="sidebar">
            <div class="sidebar-section">
                <h5>项目</h5>
                <div class="sidebar-item active">
                    <i class="bi bi-diagram-2"></i> 默认认知图谱
                </div>
                <div class="sidebar-item">
                    <i class="bi bi-diagram-2"></i> 工作决策分析
                </div>
                <div class="sidebar-item">
                    <i class="bi bi-plus"></i> 新建项目
                </div>
            </div>
            
            <div class="sidebar-section">
                <h5>工具</h5>
                <div class="sidebar-item">
                    <i class="bi bi-graph-up"></i> 用户画像分析
                </div>
                <div class="sidebar-item">
                    <i class="bi bi-diagram-3"></i> 思维链可视化
                </div>
                <div class="sidebar-item">
                    <i class="bi bi-bar-chart-steps"></i> 决策模型
                </div>
            </div>
        </div>
        
        <div class="content">
            <div class="chat-container" id="chat-container">
                <!-- 消息将在这里动态添加 -->
                <div class="message bot">
                    欢迎使用MindPilot认知图谱平台！我可以帮助你生成知识图谱、分析思维链并提供决策支持。请告诉我你想了解什么？
                </div>
            </div>
            
            <div class="visualization-container">
                <div class="tabs">
                    <div class="tab active" data-tab="knowledge-graph">知识图谱</div>
                    <div class="tab" data-tab="thought-chain">思维链</div>
                    <div class="tab" data-tab="cognitive-map">认知图谱</div>
                    <div class="tab" data-tab="decision-model">决策模型</div>
                </div>
                
                <div id="visualization-placeholder">
                    <div class="text-center">
                        <i class="bi bi-diagram-3 fs-1 mb-2"></i>
                        <p>开始对话以生成可视化内容</p>
                    </div>
                </div>
            </div>
            
            <div class="chat-input">
                <textarea id="user-input" placeholder="输入你的问题或想法..."></textarea>
                <button id="send-button">
                    <i class="bi bi-send"></i>
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatContainer = document.getElementById('chat-container');
            const userInput = document.getElementById('user-input');
            const sendButton = document.getElementById('send-button');
            const tabs = document.querySelectorAll('.tab');
            
            // 切换可视化标签
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    tabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    // 这里将来会切换不同的可视化内容
                });
            });
            
            // 发送消息
            function sendMessage() {
                const message = userInput.value.trim();
                if (message === '') return;
                
                // 添加用户消息
                addMessage(message, 'user');
                userInput.value = '';
                
                // 模拟AI响应
                setTimeout(() => {
                    const response = "我已收到你的消息，正在分析中。这里将展示基于大模型的回复，并生成相应的知识图谱和思维链可视化。";
                    addMessage(response, 'bot');
                    
                    // 模拟生成可视化
                    generateVisualization();
                }, 1000);
            }
            
            // 添加消息到聊天界面
            function addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message', sender);
                messageDiv.textContent = text;
                chatContainer.appendChild(messageDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // 生成简单的可视化示例
            function generateVisualization() {
                const placeholder = document.getElementById('visualization-placeholder');
                placeholder.innerHTML = '';
                
                // 创建SVG容器
                const svg = d3.select(placeholder).append('svg')
                    .attr('width', '100%')
                    .attr('height', '100%');
                
                // 简单的力导向图示例
                const width = placeholder.clientWidth;
                const height = placeholder.clientHeight;
                
                // 示例数据
                const nodes = [
                    { id: 'center', group: 1 },
                    { id: 'node1', group: 2 },
                    { id: 'node2', group: 2 },
                    { id: 'node3', group: 3 },
                    { id: 'node4', group: 3 },
                    { id: 'node5', group: 3 }
                ];
                
                const links = [
                    { source: 'center', target: 'node1', value: 1 },
                    { source: 'center', target: 'node2', value: 1 },
                    { source: 'center', target: 'node3', value: 1 },
                    { source: 'node1', target: 'node4', value: 1 },
                    { source: 'node2', target: 'node5', value: 1 }
                ];
                
                // 创建力导向模拟
                const simulation = d3.forceSimulation(nodes)
                    .force('link', d3.forceLink(links).id(d => d.id))
                    .force('charge', d3.forceManyBody().strength(-400))
                    .force('center', d3.forceCenter(width / 2, height / 2));
                
                // 绘制连接线
                const link = svg.append('g')
                    .selectAll('line')
                    .data(links)
                    .enter().append('line')
                    .attr('stroke', '#999')
                    .attr('stroke-opacity', 0.6)
                    .attr('stroke-width', d => Math.sqrt(d.value));
                
                // 绘制节点
                const node = svg.append('g')
                    .selectAll('circle')
                    .data(nodes)
                    .enter().append('circle')
                    .attr('r', d => d.id === 'center' ? 15 : 10)
                    .attr('fill', d => d.id === 'center' ? '#7C3AED' : '#C4B5FD')
                    .call(d3.drag()
                        .on('start', dragstarted)
                        .on('drag', dragged)
                        .on('end', dragended));
                
                // 添加文本标签
                const text = svg.append('g')
                    .selectAll('text')
                    .data(nodes)
                    .enter().append('text')
                    .text(d => d.id)
                    .attr('font-size', 12)
                    .attr('dx', 15)
                    .attr('dy', 4);
                
                // 更新模拟
                simulation.on('tick', () => {
                    link
                        .attr('x1', d => d.source.x)
                        .attr('y1', d => d.source.y)
                        .attr('x2', d => d.target.x)
                        .attr('y2', d => d.target.y);
                    
                    node
                        .attr('cx', d => d.x)
                        .attr('cy', d => d.y);
                    
                    text
                        .attr('x', d => d.x)
                        .attr('y', d => d.y);
                });
                
                // 拖拽函数
                function dragstarted(event) {
                    if (!event.active) simulation.alphaTarget(0.3).restart();
                    event.subject.fx = event.subject.x;
                    event.subject.fy = event.subject.y;
                }
                
                function dragged(event) {
                    event.subject.fx = event.x;
                    event.subject.fy = event.y;
                }
                
                function dragended(event) {
                    if (!event.active) simulation.alphaTarget(0);
                    event.subject.fx = null;
                    event.subject.fy = null;
                }
            }
            
            // 事件监听
            sendButton.addEventListener('click', sendMessage);
            userInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
        });
    </script>
</body>
</html>